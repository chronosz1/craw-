#Injection theory:

During an injection attack, an attacker can provide malicious input to a web application 
(inject it) and change the operation of the application by forcing 
it to execute certain commands.

#Types of web application injection in the wild:

`In general 9 types of injection are mostly found`

	1- code injection.

	2- sql injection.

	3- command injection.

	4- cross-site scripting(XSS) -later

	5- Xpath injection.

	6- Mail command injection.

	7- CRLF injection.

	8- Host header injection.

	9- LDAP injection.

	

--------------------------------------------CODE-INJ START-------------------------------------------------
#Code injection:

Code injection is one of the most common types of injection attacks. 
If attackers know the programming language, the framework, the database or 
the operating system used by a web application, they can inject code via text 
input fields to force the webserver to do what they want.

These types of injection attacks are possible on applications 
that lack `input data(aka attacker controlled data)` validation. 
If a text input field lets users enter whatever they want, 
then the application is potentially exploitable. To prevent these attacks, 
the application needs to restrict as much as it can the input users are allowed to enter


#Example:
When a developer uses the PHP eval() function and passes it untrusted data 
that an attacker can modify, code injection could be possible.

`The example below shows a dangerous way to use the eval() function:`

#what is eval() function in php:
The eval() function in PHP is an inbuilt function that evaluates a string as PHP code.

#php code
--------------------------
// A dangerous way to use the eval() function
// in PHP
$myvar = "varname";
$x = $_GET['arg'];
eval("\$myvar = \$x;");
---------------------------
As there is no input validation, the code above is vulnerable to a Code Injection attack.

For example:
-----------------
/index.php?arg=1; phpinfo()

Above will show all the info of php.
-------------------

While exploiting bugs like these, an attacker may want to execute system commands. 
In this case, a code injection bug can also be used for command injection. 

For example:
-------------------
/index.php?arg=1; system('id')

This will tell the id's of the process.

uid=33(www-data) gid=33(www-data) groups=33(www-data)
--------------------------------------------CODE-INJ END-------------------------------------------------


--------------------------------------------SQL START-------------------------------------------------
#Sql injection:

SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to 
its database. It basically allows an attacker to view data that they are not normally able to retrieve. 

for example data belonging to other users such as their credit-card information, passwords and many other sensitive-personal
information. and in more severe cases an attacker can gain access to the CRUD Functionality of the data-base

and in my bug bounty experiance gaining access to CRUD functionality of the data-base can easily give you $10k on any 
bug bounty platform

In Many High Profile data-breaches in recent years have been the result of sql-injection attack.


#How to look or test for sql injection(pretty basic approach)

Consider a shopping application that displays products in different categories. 
When the user clicks on the fruits category, their browser requests the URL: 

> https://insecure-website.com/items?category=fruits

#what is happening behind the curtain:

*[client-application] --request-->---<----[php-backend-server]--(explained below)--------->--<----[data-base-backend]*

*explained below part* : php server is converting the the http-request to query(like sql query etc...) for the backend database.


#to bypass the above url i.e:  https://insecure-website.com/items?category=fruits

send a payload something like this: SELECT * FROM items WHERE category = 'fruits'--' AND released = 1

this will disclose everything that is inside the `fruits` catagory

Going further, an attacker can cause the application to display all the items in any category, 
including categories that they don't know about: 

>malicious url: https://insecure-website.com/items?category=fruits'+OR+1=1--

>malicious query: SELECT * FROM items WHERE category = 'fruits' OR 1=1--' AND released = 1

The modified query will return all items where either the category is fruits, or 1 is equal to 1. 
Since 1=1 is always true, the query will return all items


#sqli example of the login-page bypass:

Consider you're logging-in on a vuln. website with a default credential like(tom:mypassword)

then, the above process will happen like http-request is going through constructor of the php server and going to 
sql website as a query

>i.e: SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese'

#malicious query : SELECT * FROM users WHERE username = 'administrator'--' AND password = ''
	to bypass the sql data-base and gaining full admin access of the website.

------------------------------------SQL END---------------------------------------------




------------------------------------Command-Inj START---------------------------------------------

OS command injection (also known as shell injection) is a web security vulnerability that allows an attacker 
to execute arbitrary operating system (OS) commands on the server that is running an application, 
and typically fully compromise the application and all its data

#usefull commands for command injection:

command 	              Linux 	      Windows 

- user name            whoami        whoami


- operating Sys        uname -a        ver


- Network config       ifconfig       ipconfig /all


- Network Connections  netstat -an    netstat -an


- Running processes 	    ps -ef 		      tasklist 




