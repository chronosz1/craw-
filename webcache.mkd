#cache poisoning:

this is a type of attck on web-servers where an attacker exploits 
the cache server of the website which eventually makes the cache server
send copies of malicios HTTP responses to the victim users!

#this attack comes in two steps:

- how to issue a malicious response from back-end to cache server!

- the respose must get to the users via poisoned cache!

> result of the cache poisoning can be massive like {mass xss attack on the users!}


#let's see how a web-caching system works?

>what's the geniune reason to use the caching system???

this is impossible for a server to respond to all users saperately
{i.e every sigle HTTP request to each users!}

so cache servers are for the above purpose.

note: for a defined period of time cache servers serves the copy of same request.

#Cache Keys:
to serve a cached response webserver first match the request for the response
with the help of cache-keys 

if cache-key matches to the request of the previous response then cache is served
in which other parts of the request gets ignored by the server

# cache poisoning attack in 3 steps:

- find the unkeyed inputs

- get a malicious response from the webserver backend!

- get the response cached \0/ \0/ \0/


#param miner:
with the help of param miner you can find unkeyed parts of the HTTP request

> what's a cache-buster?
while pentising this attack can affect real users with your poisond caches!

for that we use <CacheBuster> to server you if luckiley poisoned cache to you only!

- if you found any unkeyed header/parts in a HTTP request then 
	find ways to exploit it.












